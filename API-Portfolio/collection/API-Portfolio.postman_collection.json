{
	"info": {
		"_postman_id": "7cfea081-e530-4a24-88d2-622acf039eca",
		"name": "API-Portfolio",
		"description": "## ðŸŽ¯ Opis projektu\n\nTen projekt pokazuje moje umiejÄ™tnoÅ›ci testowania REST API z wykorzystaniem darmowego mock API â€”\n\n[https://jsonplaceholder.typicode.com/](https://jsonplaceholder.typicode.com/)  \nPrzetestowano wszystkie gÅ‚Ã³wne metody HTTP: `GET`, `POST`, `PUT`, `PATCH`, `DELETE`.\n\nW projekcie znajdujÄ… siÄ™ dwa Å›rodowiska:\n\n- **Dev**\n    \n- **Prod**\n    \n\nKaÅ¼de z nich zawiera zmienne:\n\n- `base_url` â€“ adres API\n    \n- `token` â€“ pusta wartoÅ›Ä‡\n    \n\nKaÅ¼da metoda HTTP posiada **oddzielnÄ… dokumentacjÄ™**",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48581825",
		"_collection_link": "https://oooy3706-4874074.postman.co/workspace/9edb7336-4132-4f07-836e-9c2da1f4a60c/collection/48581825-7cfea081-e530-4a24-88d2-622acf039eca?action=share&source=collection_link&creator=48581825"
	},
	"item": [
		{
			"name": "GET Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Verify status code",
							"pm.test(\"Status code is 200\", function () { ",
							"    pm.response.to.have.status(200);",
							"});",
							"//Verify response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"//Verify JSON schema",
							"const expectedSchema = {",
							"  \"type\": \"array\",",
							"  \"items\": {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"      \"id\": {",
							"        \"type\": \"integer\"",
							"      },",
							"      \"name\": {",
							"        \"type\": \"string\"",
							"      },",
							"      \"username\": {",
							"        \"type\": \"string\"",
							"      },",
							"      \"email\": {",
							"        \"type\": \"string\"",
							"      },",
							"      \"address\": {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"          \"street\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"suite\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"city\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"zipcode\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"geo\": {",
							"            \"type\": \"object\",",
							"            \"properties\": {",
							"              \"lat\": {",
							"                \"type\": \"string\"",
							"              },",
							"              \"lng\": {",
							"                \"type\": \"string\"",
							"              }",
							"            },",
							"            \"required\": [",
							"              \"lat\",",
							"              \"lng\"",
							"            ]",
							"          }",
							"        },",
							"        \"required\": [",
							"          \"street\",",
							"          \"suite\",",
							"          \"city\",",
							"          \"zipcode\",",
							"          \"geo\"",
							"        ]",
							"      },",
							"      \"phone\": {",
							"        \"type\": \"string\"",
							"      },",
							"      \"website\": {",
							"        \"type\": \"string\"",
							"      },",
							"      \"company\": {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"          \"name\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"catchPhrase\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"bs\": {",
							"            \"type\": \"string\"",
							"          }",
							"        },",
							"        \"required\": [",
							"          \"name\",",
							"          \"catchPhrase\",",
							"          \"bs\"",
							"        ]",
							"      }",
							"    },",
							"    \"required\": [",
							"      \"id\",",
							"      \"name\",",
							"      \"username\",",
							"      \"email\",",
							"      \"address\",",
							"      \"phone\",",
							"      \"website\",",
							"      \"company\"",
							"    ]",
							"  }",
							"}",
							"",
							"pm.test(\"Validate JSON schema\", function() {",
							"    pm.response.to.have.jsonSchema(expectedSchema);",
							"})",
							"",
							"//Verify user data",
							"pm.test(\"User data is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    jsonData.forEach(user => {",
							"        pm.expect(user.id).to.be.a('number');",
							"        pm.expect(user.name).to.be.a('string');",
							"        pm.expect(user.username).to.be.a('string');",
							"        pm.expect(user.email).to.be.a('string');",
							"        pm.expect(user.address).to.have.property('street');",
							"        pm.expect(user.address).to.have.property('suite');",
							"        pm.expect(user.address).to.have.property('city');",
							"        pm.expect(user.address).to.have.property('zipcode');",
							"        pm.expect(user.address.geo).to.have.property('lat');",
							"        pm.expect(user.address.geo).to.have.property('lng');",
							"        pm.expect(user.phone).to.be.a('string');",
							"        pm.expect(user.website).to.be.a('string');",
							"        pm.expect(user.company).to.have.property('name');",
							"        pm.expect(user.company).to.have.property('catchPhrase');",
							"        pm.expect(user.company).to.have.property('bs');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}",
					"host": [
						"{{base_url}}"
					]
				},
				"description": "## GET Users\n\nTo zapytanie pobiera listÄ™ uÅ¼ytkownikÃ³w z API, korzystajÄ…c z adresu [https://jsonplaceholder.typicode.com/users](https://jsonplaceholder.typicode.com/users). SÅ‚uÅ¼y do uzyskania peÅ‚nych danych uÅ¼ytkownikÃ³w â€” w tym informacji kontaktowych, adresowych i firmowych.\n\n### Cel\n\n- Pobranie wszystkich profili uÅ¼ytkownikÃ³w.\n    \n- KaÅ¼dy obiekt zawiera dane identyfikacyjne, adresowe i firmowe.\n    \n\n### UÅ¼ycie\n\n- **Endpoint:** `GET` [https://jsonplaceholder.typicode.com/users](https://jsonplaceholder.typicode.com/users)\n    \n- **Autoryzacja:** Brak (mock API)\n    \n- **OdpowiedÅº:** Tablica obiektÃ³w uÅ¼ytkownikÃ³w z polami takimi jak `id`, `name`, `email`, `address`, `company`.\n    \n\n### Oczekiwana odpowiedÅº\n\n- **Status:** `200 OK`\n    \n\n### Walidacje (skrypt testowy)\n\n1. **Kod statusu** â€” oczekiwany `200 OK`\n    \n2. Czas odpowiedzi nie przekracza spodziewanego progu >200ms\n    \n3. **Struktura JSON** â€” sprawdzenie obecnoÅ›ci wymaganych pÃ³l\n    \n4. **PoprawnoÅ›Ä‡ danych** â€” typy danych i kompletnoÅ›Ä‡ informacji"
			},
			"response": []
		},
		{
			"name": "GET Users Invalid Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Verify status code (invalid user endpoint)\r",
							"pm.test(\"Status code is 404\", function () { \r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"//Verify response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/12",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"12"
					]
				},
				"description": "## GET Invalid User\n\nZapytanie testuje zachowanie API przy prÃ³bie pobrania uÅ¼ytkownika o nieistniejÄ…cym ID (np. [https://jsonplaceholder.typicode.com/users/12](https://jsonplaceholder.typicode.com/users)).\n\n### Cel\n\n- Sprawdzenie odpowiedzi API na niepoprawne dane wejÅ›ciowe.\n    \n- Walidacja obsÅ‚ugi bÅ‚Ä™dÃ³w (np. pusty obiekt, brak danych, kod statusu).\n    \n\n### UÅ¼ycie\n\n- **Endpoint:** `GET` [https://jsonplaceholder.typicode.com/users](https://jsonplaceholder.typicode.com/users)`/12`\n    \n- **Autoryzacja:** Brak\n    \n- **Oczekiwana odpowiedÅº:**\n    \n    - Status: `404 Not Found`z pustym obiektem\n        \n    - Body: pusty obiekt `{}` lub brak danych\n        \n\n### Walidacje (skrypt testowy)\n\n- Kod statusu `404`\n    \n- Czas odpowiedzi nie przekracza spodziewanego progu >200ms\n    \n- Sprawdzenie, czy odpowiedÅº nie zawiera danych uÅ¼ytkownika\n    \n\n**Test negatywny â€” API nie powinno zwracaÄ‡ 200 dla nieistniejÄ…cego ID uÅ¼ytkownika**"
			},
			"response": []
		},
		{
			"name": "POST User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Verify status code",
							"pm.test(\"Status code is 201\", function () { ",
							"    pm.response.to.have.status(201);",
							"});",
							"//Verify response time",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"//Verify JSON schema",
							"const expectedSchema = {",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"id\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"username\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"email\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"address\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"street\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"suite\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"city\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"zipcode\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"geo\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"lat\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"lng\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"lat\",",
							"            \"lng\"",
							"          ]",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"street\",",
							"        \"suite\",",
							"        \"city\",",
							"        \"zipcode\",",
							"        \"geo\"",
							"      ]",
							"    },",
							"    \"phone\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"website\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"company\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"name\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"catchPhrase\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"bs\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"name\",",
							"        \"catchPhrase\",",
							"        \"bs\"",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"id\",",
							"    \"name\",",
							"    \"username\",",
							"    \"email\",",
							"    \"address\",",
							"    \"phone\",",
							"    \"website\",",
							"    \"company\"",
							"  ]",
							"};",
							"pm.test(\"Validate JSON schema\", function() {",
							"    pm.response.to.have.jsonSchema(expectedSchema);",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "//Create new user (mix of both dynamic and static data)\r\n{\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"email\": \"yoo@example.com\",\r\n  \"address\": {\r\n    \"street\": \"Okopowa\",\r\n    \"suite\": \"Apt. 101\",\r\n    \"city\": \"Gliwice\",\r\n    \"zipcode\": \"44-100\",\r\n    \"geo\": {\r\n      \"lat\": \"50.2945\",\r\n      \"lng\": \"18.6714\"\r\n    }\r\n  },\r\n  \"phone\": \"123-456-7890\",\r\n  \"website\": \"yooqa.dev\",\r\n  \"company\": {\r\n    \"name\": \"QA Masters\",\r\n    \"catchPhrase\": \"Testing made simple\",\r\n    \"bs\": \"automate and validate\"\r\n  }\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}",
					"host": [
						"{{base_url}}"
					]
				},
				"description": "## POST User\n\nTo zapytanie tworzy nowego uÅ¼ytkownika w systemie, wysyÅ‚ajÄ…c dane w formacie JSON na endpoint [https://jsonplaceholder.typicode.com/users](https://jsonplaceholder.typicode.com/users). SÅ‚uÅ¼y do dodania profilu uÅ¼ytkownika z danymi osobistymi, adresem i informacjami o firmie.\n\n### Cel\n\n- Dodanie nowego uÅ¼ytkownika przez API.\n    \n- Body zawiera pola takie jak: `name`, `username`, `email`, `address`, `phone`, `website`, `company`.\n    \n\n### UÅ¼ycie\n\n- **Endpoint:** `POST` [https://jsonplaceholder.typicode.com/users](https://jsonplaceholder.typicode.com/users)\n    \n- **Autoryzacja:** Brak (mock API)\n    \n- **Body:** `application/json`\n    \n\n### Oczekiwana odpowiedÅº\n\n- **Status:** `201 Created`\n    \n- **Body:** Obiekt uÅ¼ytkownika z nadanym `id`\n    \n\n### Walidacje (skrypt testowy)\n\n- **Kod statusu** â€” oczekiwany `201`\n    \n- Czas odpowiedzi nie przekracza spodziewanego progu >500ms\n    \n- **Struktura JSON** â€” obecnoÅ›Ä‡ wymaganych pÃ³l"
			},
			"response": []
		},
		{
			"name": "POST User Invalid Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Verify status code",
							"pm.test(\"Status code is 201\", function () { ",
							"    pm.response.to.have.status(201);",
							"});",
							"//Verify response time",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"//Verify JSON schema",
							"const expectedSchema = {",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"id\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"username\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"email\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"address\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"street\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"suite\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"city\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"zipcode\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"geo\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"lat\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"lng\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"lat\",",
							"            \"lng\"",
							"          ]",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"street\",",
							"        \"suite\",",
							"        \"city\",",
							"        \"zipcode\",",
							"        \"geo\"",
							"      ]",
							"    },",
							"    \"phone\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"website\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"company\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"name\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"catchPhrase\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"bs\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"name\",",
							"        \"catchPhrase\",",
							"        \"bs\"",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"id\",",
							"    \"name\",",
							"    \"username\",",
							"    \"email\",",
							"    \"address\",",
							"    \"phone\",",
							"    \"website\",",
							"    \"company\"",
							"  ]",
							"};",
							"pm.test(\"Validate JSON schema\", function() {",
							"    pm.response.to.have.jsonSchema(expectedSchema);",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "//Create new user (already existing email and name)\r\n{\r\n  \"name\": \"Ervin Howell\",\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"email\": \"Sincere@april.biz\",\r\n  \"address\": {\r\n    \"street\": \"Krakowska\",\r\n    \"suite\": \"Apt. 101\",\r\n    \"city\": \"Olkusz\",\r\n    \"zipcode\": \"44-100\",\r\n    \"geo\": {\r\n      \"lat\": \"50.2945\",\r\n      \"lng\": \"18.6714\"\r\n    }\r\n  },\r\n  \"phone\": \"123-456-7890\",\r\n  \"website\": \"easter.dev\",\r\n  \"company\": {\r\n    \"name\": \"QA Enigeneers\",\r\n    \"catchPhrase\": \"Testing made efficient\",\r\n    \"bs\": \"automate and validate response\"\r\n  }\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}",
					"host": [
						"{{base_url}}"
					]
				},
				"description": "## **POST User â€” duplikat danych**\n\nTo zapytanie prÃ³buje utworzyÄ‡ nowego uÅ¼ytkownika w systemie, wysyÅ‚ajÄ…c dane w formacie JSON na endpoint [https://jsonplaceholder.typicode.com/users](https://jsonplaceholder.typicode.com/users). SÅ‚uÅ¼y do dodania profilu uÅ¼ytkownika z danymi osobistymi, adresem i informacjami o firmie. W tym przypadku uÅ¼yto danych, ktÃ³re juÅ¼ istniejÄ… w bazie (email i imiÄ™).\n\n### **Cel**\n\n- Sprawdzenie, czy API odrzuca prÃ³bÄ™ dodania uÅ¼ytkownika z istniejÄ…cym adresem email i imieniem.\n    \n- **Body** zawiera pola takie jak: name, username, email, address, phone, website, company.\n    \n\n### **UÅ¼ycie**\n\n- **Endpoint:**`POST`  \n    [https://jsonplaceholder.typicode.com/users](https://jsonplaceholder.typicode.com/users)\n    \n- **Autoryzacja:** Brak (mock API)\n    \n- **Body:** application/json\n    \n\n### **Oczekiwana odpowiedÅº**\n\n- **Status:**409 Conflict lub inny bÅ‚Ä…d walidacji\n    \n- **Body:** Informacja o bÅ‚Ä™dzie â€” uÅ¼ytkownik juÅ¼ istnieje\n    \n\n### **Faktyczna odpowiedÅº (mock API)**\n\n- **Status:** `201 Created`\n    \n- **Body:** Obiekt uÅ¼ytkownika z nadanym id â€” brak walidacji duplikatÃ³w\n    \n\n### **Walidacje (skrypt testowy)**\n\n- Kod statusu â€” nie powinien byÄ‡ 201\n    \n- Czas odpowiedzi nie przekracza spodziewanego progu >500ms\n    \n- Struktura JSON â€” obecnoÅ›Ä‡ pÃ³l: id, email, name\n    \n\n**Test negatywny â€” API nie powinno tworzyÄ‡ uÅ¼ytkownika z istniejÄ…cym emailem**"
			},
			"response": []
		},
		{
			"name": "PUT User Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200); //Response time higher than expected on the first request",
							"});",
							"",
							"//Validate JSON schema",
							"const expectedSchema = {",
							"  \"type\": \"object\",",
							"  \"items\": {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"      \"id\": {",
							"        \"type\": \"integer\"",
							"      },",
							"      \"name\": {",
							"        \"type\": \"string\"",
							"      },",
							"      \"username\": {",
							"        \"type\": \"string\"",
							"      },",
							"      \"email\": {",
							"        \"type\": \"string\"",
							"      },",
							"      \"address\": {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"          \"street\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"suite\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"city\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"zipcode\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"geo\": {",
							"            \"type\": \"object\",",
							"            \"properties\": {",
							"              \"lat\": {",
							"                \"type\": \"string\"",
							"              },",
							"              \"lng\": {",
							"                \"type\": \"string\"",
							"              }",
							"            },",
							"            \"required\": [",
							"              \"lat\",",
							"              \"lng\"",
							"            ]",
							"          }",
							"        },",
							"        \"required\": [",
							"          \"street\",",
							"          \"suite\",",
							"          \"city\",",
							"          \"zipcode\",",
							"          \"geo\"",
							"        ]",
							"      },",
							"      \"phone\": {",
							"        \"type\": \"string\"",
							"      },",
							"      \"website\": {",
							"        \"type\": \"string\"",
							"      },",
							"      \"company\": {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"          \"name\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"catchPhrase\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"bs\": {",
							"            \"type\": \"string\"",
							"          }",
							"        },",
							"        \"required\": [",
							"          \"name\",",
							"          \"catchPhrase\",",
							"          \"bs\"",
							"        ]",
							"      }",
							"    },",
							"    \"required\": [",
							"      \"id\",",
							"      \"name\",",
							"      \"username\",",
							"      \"email\",",
							"      \"address\",",
							"      \"phone\",",
							"      \"website\",",
							"      \"company\"",
							"    ]",
							"  }",
							"}",
							"",
							"pm.test(\"Validate JSON schema\", function() {",
							"    pm.response.to.have.jsonSchema(expectedSchema);",
							"})",
							"",
							"//Verify user data",
							"pm.test(\"User data is correct\", function () {",
							"    const user = pm.response.json();",
							"    pm.expect(user.id).to.be.a('number');",
							"    pm.expect(user.name).to.be.a('string');",
							"    pm.expect(user.username).to.be.a('string');",
							"    pm.expect(user.email).to.be.a('string');",
							"    pm.expect(user.address).to.have.property('street');",
							"    pm.expect(user.address).to.have.property('suite');",
							"    pm.expect(user.address).to.have.property('city');",
							"    pm.expect(user.address).to.have.property('zipcode');",
							"    pm.expect(user.address.geo).to.have.property('lat');",
							"    pm.expect(user.address.geo).to.have.property('lng');",
							"    pm.expect(user.phone).to.be.a('string');",
							"    pm.expect(user.website).to.be.a('string');",
							"    pm.expect(user.company).to.have.property('name');",
							"    pm.expect(user.company).to.have.property('catchPhrase');",
							"    pm.expect(user.company).to.have.property('bs');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "//Replace existing data\r\n{\r\n  \"id\": 3,\r\n  \"name\": \"Jan Kowalski\",\r\n  \"username\": \"jk32\",\r\n  \"email\": \"jan.kowalski@example.com\",\r\n  \"address\": {\r\n    \"street\": \"TarnogÃ³rska 101\",\r\n    \"suite\": \"Apt. 5\",\r\n    \"city\": \"Warszawa\",\r\n    \"zipcode\": \"44-100\",\r\n    \"geo\": {\r\n      \"lat\": \"50.2945\",\r\n      \"lng\": \"18.6714\"\r\n    }\r\n  },\r\n  \"phone\": \"123-556-7890\",\r\n  \"website\": \"kowalskisolutions.dev\",\r\n  \"company\": {\r\n    \"name\": \"QA heroes\",\r\n    \"catchPhrase\": \"Testing made elegant\",\r\n    \"bs\": \"automate and validate\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/3",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"3"
					]
				},
				"description": "## PUT User Data\n\nAktualizuje dane uÅ¼ytkownika o `id: 3`, zastÄ™pujÄ…c caÅ‚y obiekt uÅ¼ytkownika nowymi informacjami.\n\n### Cel\n\n- Nadpisanie wszystkich danych uÅ¼ytkownika (imiÄ™, adres, firma itd.)\n    \n\n### UÅ¼ycie\n\n- **Endpoint:** `PUT` [https://jsonplaceholder.typicode.com/users](https://jsonplaceholder.typicode.com/users)`/3`\n    \n- **Typ:** `application/json`\n    \n- **Body:** peÅ‚ny obiekt uÅ¼ytkownika z nowymi danymi\n    \n\n### Oczekiwana odpowiedÅº\n\n- **Status:** `200 OK`\n    \n- **Body:** zaktualizowany obiekt uÅ¼ytkownika\n    \n\n### Walidacje (skrypt testowy)\n\n- Kod statusu = 200\n    \n- Czas odpowiedzi nie przekracza spodziewanego progu >200ms\n    \n- Sprawdzenie struktury JSON i typÃ³w danych"
			},
			"response": []
		},
		{
			"name": "PATCH User Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Verify status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Response time validation\r",
							"pm.test(\"Response time is less than 300ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300); \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "//Modify selected data\r\n{\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"username\": \"krill\",\r\n  \"address\": {\r\n    \"zipcode\": \"48-320\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/7",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"7"
					]
				},
				"description": "## PATCH User Data\n\nCzÄ™Å›ciowo aktualizuje dane uÅ¼ytkownika o `id: 7`, modyfikujÄ…c tylko wybrane pola.\n\n### Cel\n\n- Zmiana wybranych danych uÅ¼ytkownika (np. imiÄ™, username, kod pocztowy), bez nadpisywania caÅ‚ego obiektu.\n    \n\n### UÅ¼ycie\n\n- **Endpoint:** `PATCH` [https://jsonplaceholder.typicode.com/users](https://jsonplaceholder.typicode.com/users)`/7`\n    \n- **Typ:** `application/json`\n    \n- **Body:** tylko pola do aktualizacji\n    \n\n### Oczekiwana odpowiedÅº\n\n- **Status:** `200 OK`\n    \n- **Body:** obiekt uÅ¼ytkownika z wprowadzonymi zmianami\n    \n\n### Walidacje (skrypt testowy)\n\n- Kod statusu = 200\n    \n- Czas odpowiedzi nie przekracza spodziewanego progu >300ms"
			},
			"response": []
		},
		{
			"name": "DELETE User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Verify sucessful deletion of resource\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);  // Expected by REST standards, got 200 from mock API\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/8",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"8"
					]
				},
				"description": "## DELETE User\n\nUsuwa uÅ¼ytkownika o `id: 8` z systemu.\n\n### Cel\n\n- TrwaÅ‚e usuniÄ™cie uÅ¼ytkownika z bazy danych\n    \n- Przydatne w testach operacji DELETE i zarzÄ…dzaniu uÅ¼ytkownikami\n    \n\n### UÅ¼ycie\n\n- **Endpoint:** `DELETE` [https://jsonplaceholder.typicode.com/users](https://jsonplaceholder.typicode.com/users)`/8`\n    \n- **Typ:** brak body â€” ID uÅ¼ytkownika w Å›cieÅ¼ce\n    \n\n### Oczekiwana odpowiedÅº\n\n- **Status:** `204 No Content`\n    \n- **Body:** zazwyczaj puste `{}` lub brak treÅ›ci\n    \n\n### Walidacje (skrypt testowy)\n\n- Kod statusu = 200 (spodziewany 204)\n    \n- Czas odpowiedzi nie przekracza spodziewanego progu >200ms"
			},
			"response": []
		},
		{
			"name": "DELETE User Invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/abc",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"abc"
					]
				},
				"description": "## DELETE User Invalid ID\n\nUsuwa uÅ¼ytkownika o nieprawidÅ‚owym `id` z systemu.\n\n### Cel\n\n- Testowanie zachowania systemu przy prÃ³bie usuniÄ™cia uÅ¼ytkownika o nieistniejÄ…cym lub nieprawidÅ‚owym ID\n    \n\n### UÅ¼ycie\n\n- **Endpoint:** `DELETE` [https://jsonplaceholder.typicode.com/users](https://jsonplaceholder.typicode.com/users)`/abc`\n    \n- **Typ:** brak body â€” ID uÅ¼ytkownika w Å›cieÅ¼ce (nieprawidÅ‚owe ID)\n    \n\n### Oczekiwana odpowiedÅº\n\n- **Status:** `404 Not Found` lub inny odpowiedni kod bÅ‚Ä™du wskazujÄ…cy, Å¼e uÅ¼ytkownik nie istnieje\n    \n- **Body:** komunikat bÅ‚Ä™du lub pusta odpowiedÅº\n    \n\n### **Faktyczna odpowiedÅº (mock API)**\n\n- Status: `200 OK`\n    \n\n### Walidacje (skrypt testowy)\n\n- Kod statusu = 200 (Spodziewany 404)\n    \n- Czas odpowiedzi nie przekracza spodziewanego progu >200ms\n    \n\n**Test negatywny â€” API nie powinno usuwaÄ‡ uÅ¼ytkownika o nieprawidÅ‚owym ID**"
			},
			"response": []
		}
	]
}